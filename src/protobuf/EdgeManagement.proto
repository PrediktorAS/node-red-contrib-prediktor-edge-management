syntax = "proto3";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "ConfigRepository.proto";
import "PrediktorCommon.proto";

option csharp_namespace = "Prediktor.EdgeManagement";

package EdgeManagement;

// The Prediktor Edge Management definition.
service EdgeManagement {

  rpc ping (google.protobuf.Empty) returns (google.protobuf.StringValue);
  rpc info(google.protobuf.Empty) returns (EdgeManagementDetails);

  //Upload a namespace nodeset from a Hive instance to Configuration Respository.
  rpc uploadNamespace (UploadNamespaceRequest) returns (PrediktorCommon.Result);

  //Compare a namespace backup from Configuration Respository with a running Hive's namespace
  rpc compareNamespaces (NamespaceCompareRequest) returns (stream ConfigRepository.NamespaceCompareResult);

  //Restore a namespace backup from Configuration Respository to a Hive
  rpc restoreNamespace (RestoreNamespaceRequest) returns (PrediktorCommon.StringResult);

  //Upload a Hive configuration backup from a running Hive instance.
  rpc uploadHiveConfig (UploadHiveConfigRequest) returns (PrediktorCommon.Result);

  //Compare a configuration backup from Configuration Respository with a running Hive
  rpc compareHiveConfig (HiveConfigCompareRequest) returns (stream ConfigRepository.HiveConfigCompareResult); 

  //Restore a configuration backup from Configuration Respository to a Hive
  rpc restoreHiveConfig(RestoreHiveConfigRequest) returns (PrediktorCommon.StringResult);


  //Upload a Variable Mappings backup for a namspace to Configuration Respository
  rpc uploadVariableMappings(UploadVariableMappingsRequest) returns (PrediktorCommon.Result);
  
  //Compare a Variable Mappings backup from Configuration Respository to what is currently configured in a Hive module
  rpc compareVariableMappings (CompareVariableMappingsRequest) returns (stream ConfigRepository.CompareVariableMappingsResult);

  //Restore a Variable Mappings backup from Configuration Respository to a namespace in a Hive
  rpc restoreVariableMappings(RestoreVariableMappingsRequest) returns (PrediktorCommon.Result);

  //Get the OPC UA NamespaceArray for an edge
  rpc getNamespaceArray(NamespaceArrayRequest) returns (PrediktorCommon.StringArrayResult);

}

message NamespaceArrayRequest {
	string hiveName = 1;
}

// Restore variable mappings to a module in a Hive
message RestoreVariableMappingsRequest {
	// The uri for the Configuration Repository to fetch the file. (cr://<server>:<port>)
	string configRepoUri = 1;
	// Id of the revision that contains the file to restore
	string revisionId = 2;
	//Transfer EU (EngineeringUnit) from source items. EU of source items will be transferred to target items by adding the attribute ExtItemMetaTransfer to the target items with the value EngineeringUnit
	bool transferEu = 3;
	// Name of Hive to restore the mappings
	string hiveName = 4;
	// Name of the Hive module to restore the mappings
	string moduleName = 5;
	// Include item attributes that normally is not imported, id <= 5  (if they exist in the import file).
	repeated int32 allowRestrictedAttribs = 6;
}

message UploadVariableMappingsRequest {
	string configRepoUri = 1;
	string storeId = 2;
	string description = 3;
	string version = 4;
	string moduleName = 5;
	string hiveName = 6;
}

message HiveConfigCompareRequest {
	string configRepoUri = 1;
	string instanceName = 2;
	string revisionId = 3;
}

message RestoreNamespaceRequest {
	string configRepoUri = 1;
	string namespaceUri = 2;
	string revisionId = 3;
	PrediktorCommon.StringArray checkMethods = 4;
	bool overrideErrors = 5;
	bool useNodeSetChangesToReplace = 6;
	string hiveName = 7;
	repeated HiveProperty hiveProperties = 8;
}

message HiveProperty {
	int32 id = 1;
	HivePropertyValue value = 2;
}
message HivePropertyValue {
	oneof value {
		int32 enumValue = 1;
		bool boolValue = 2;
		int32 intValue = 3;
	}
}

message RestoreHiveConfigRequest {
	string configRepoUri = 1;
	string revisionId = 2;
	bool startHiveWhenDone = 3;
}

message UploadHiveConfigRequest {
	string configRepoUri = 1;
	string configName = 2;
	string storeId = 3;
	string description = 4;
	string version = 5;
	ApisConfigInfo apisConfig = 100;
}

message NamespaceCompareRequest {

	string namespaceUri = 1;	
	string hiveName = 2;

	oneof compareData {
		ConfigRepoNamespaceCompare configRepoNamespaceCompare = 3;
		FileNamespaceCompare fileNamespaceCompare = 4;
	}
}

message ConfigRepoNamespaceCompare {

	string configRepoUri = 1;
	string revisionId = 2;
	bool excludeValueSourceAttributes = 3;	
 	ConfigRepository.RevisionTypeEnum revisionType = 4; // namespaceNodeset or namespaceDatabase
}

message FileNamespaceCompare {

	string fileUri = 1;
}

message NamespaceCompareLocallyRequest {
	string namespaceUri = 1;
	string nodesetFile = 2;
	string hiveName = 3;
}

enum NameSpaceType {
	nodeSet = 0;
	nodeSetChanges = 1;
}

message UploadNamespaceRequest {
	string namespaceUri = 1;
	string configRepoUri = 2;
	string storeId = 3;
	string description = 4;
	string version = 5;
	string hiveName = 6;
	NameSpaceType nameSpaceType = 7;
}

message ApisConfigInfo {
	bool honeystore = 1;
// bool Chronical = 2;
	bool configOnly = 3;
	string hiveInstanceName = 4;
}

message CompareVariableMappingsRequest {
	string configRepoUri = 1;
	string revisionId = 2;
	string moduleName = 3;
	string hiveName = 4;
}

message EdgeManagementDetails {
	string version = 1;
	string minVersion = 2;
	string vendor = 3;
	string url = 4;
}

