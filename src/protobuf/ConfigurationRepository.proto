syntax = "proto3";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "PrediktorCommon.proto";

option csharp_namespace = "Prediktor.ConfigurationRepository";

package ConfigurationRepository;

// The Configuration Repository Service definition.
service ConfigurationRepository {

  rpc ping (google.protobuf.Empty) returns (google.protobuf.StringValue);
  rpc info(google.protobuf.Empty) returns (ConfigurationRepositoryDetails);

  rpc createNode (NodeRequest) returns (NodeResponse);
  rpc updateNode (NodeRequest) returns (PrediktorCommon.Result);
  rpc getNodes (GetNodesRequest) returns (GetNodesResponse);
  rpc getNode (NodeId) returns (NodeDetail);
  rpc deleteNode (NodeId) returns (PrediktorCommon.Result);

  rpc uploadBinaryContent (stream UploadContentRequest) returns (PrediktorCommon.Result);
  rpc uploadTextContent (stream UploadContentRequest) returns (PrediktorCommon.Result);

  rpc downloadBinaryContent (NodeId) returns (stream PrediktorCommon.ByteStream);
  rpc downloadTextContent (NodeId) returns (stream PrediktorCommon.StringArray);

  rpc compareNamespaces (NamespaceCompareRequest) returns (stream NamespaceCompareResult);
  rpc compareHiveConfig (HiveConfigCompareRequest) returns (stream HiveConfigCompareResult);
  rpc compareVariableMappings (RevisionCompareRequest) returns (stream CompareVariableMappingsResult);

}

message NodeId {
	string id = 1;
}

message NodeIds {
	repeated NodeId ids = 1;
	PrediktorCommon.Result result = 2;
}

message NodeRequest { 
	NodeId parentId = 1;
	NodeId id = 2;
	string name = 3;
	string description = 4;
	oneof data {
		NodeData nodeData = 7;
		RevisionData revisionData = 8;
	}
}

message NodeResponse{
	NodeId nodeId = 1;
	PrediktorCommon.Result result = 2;
}

message GetNodesRequest {
	NodeId parentNodeId = 1;
	int32 pageNo = 2;
	int32 pageSize = 3;
}

message GetNodesResponse {
	NodeId parentId = 1;
	repeated NodeDetail subNodes = 2;
	int32 prevPage = 3;
	int32 nextPage = 4;
	int32 pageSize = 5;
	int32 totalCount = 6;
	PrediktorCommon.Result result = 7;
}

message NodeDetail {
	string id = 1;
	string name = 2;
	string description = 3;
	google.protobuf.Timestamp date = 4;
	PrediktorCommon.Result result = 5;
	oneof data {
		NodeData nodeData = 7;
		RevisionData revisionData = 8;
	}
}

message NodeData {
	ConfigProjectTypeEnum type = 1;
}

message RevisionData {
	RevisionTypeEnum type = 1;
	string version = 2;
	string modelVersion = 3;
	google.protobuf.Timestamp publicationDate = 4;
	string backupSetId = 5;
}

//Nodes (folders) and Stores
enum ConfigProjectTypeEnum {
	undefined = 0;
	node = 1;
	namespaceNodeset = 2;
	hiveConfiguration = 3;
	namespaceDatabase = 4;
	variableMappings = 5;
}

//Revisions
enum RevisionTypeEnum {
	unknownRevision = 0;
	namespaceNodesetRevision = 1;
	hiveConfigurationRevision = 2;
	namespaceDatabaseRevision = 3;
	variableMappingsRevision = 4;
}

message ConfigurationRepositoryDetails {
	string version = 1;
	string minVersion = 2;
	string vendor = 3;
	string url = 4;
}

message UploadContentRequest {
	oneof request {
		NodeId revisionId = 1;
		PrediktorCommon.ByteStream binaryChunk = 2;
		PrediktorCommon.StringArray textChunk = 3;
	}
}

message NamespaceCompareRequest {
	string baseRevisionId = 1;
	string compareRevisionId = 2;
	ConfigProjectTypeEnum configProjectType = 3;
	bool excludeValueSourceAttributes = 4;
}

message RevisionCompareRequest {
	string baseRevisionId = 1;
	string compareRevisionId = 2;
}

message HiveConfigCompareRequest {
	string baseRevisionId = 1;
	string compareRevisionId = 2;
	string InstanceName = 3;
}

message IdAndBrowsename {
	string id = 1;
	string browsename = 2;
}

enum ConfigValuePresence {
	sourceAndDestination = 0;
	onlySource = 1;
	onlyDestination = 2;
}

message ConfigValueDiff {
	string						name = 1;
	ConfigValuePresence			valuePresence = 2;
	string						sourceValue = 100;
	string						destinationValue = 101;
}

message RegistryConfigValueDiff {
	string						path = 1;
	ConfigValueDiff				diff = 10;
}

message RegistryConfigValueDiffs {
	repeated RegistryConfigValueDiff registryValues = 1;
}

message HiveAttributeValueDiff {
	int32						attributeId = 1;
	ConfigValueDiff				diff = 10;
}

message HiveAttributeValueDiffs {
	repeated HiveAttributeValueDiff attributes = 1;
}

message HiveModuleItemConfigDiff {
	string						name = 1;
	ConfigValuePresence			itemPresence = 2;
	HiveAttributeValueDiffs		attributeDiffs = 10;
}

message HiveModuleItemConfigDiffs {
	repeated HiveModuleItemConfigDiff Items = 10;
}

message HiveModuleConfigDiff {
	oneof diff {
		string						name = 1;
		ConfigValuePresence			valuePresence = 2;
		RegistryConfigValueDiffs	registryDiffs = 10;
		HiveAttributeValueDiffs		moduleDiffs = 20;
		HiveModuleItemConfigDiffs	itemDiffs = 30;
	}
}

message HiveModuleConfigDiffs {
	repeated HiveModuleConfigDiff modules = 1;
}

message ErrorInfo {
	string error = 1;
	string errorDetails = 2;
}

message HiveConfigCompareResult {
	oneof result {
		string						name = 1;
		HiveModuleConfigDiffs		moduleDiffs = 10;
		RegistryConfigValueDiffs	registryDiffs = 20;
		ErrorInfo					errorInfo = 30;
	}
}

message ModifiedAttribute {
	uint32 attributeId = 1;
	string oldValue = 2;
	string newValue = 3;
}

message ModifiedValue {
	string valueName = 1;
	string oldValue = 2;
	string newValue = 3;
}

message ModifiedNamespace {
	int32 idx = 1;
	bool autoUpdate = 2;
	string modelVersion = 3;
	google.protobuf.Timestamp publicationDate = 4;
	google.protobuf.Timestamp lastModified = 5;
}

message NsIndexPresence {
	uint32 nsIndex = 1;
	int32 presentIn = 2;
}

message QualifiedName {
	uint32 namespaceIndex = 1;
	string name = 2;
}

message LocalizedText {
     SemanticsLocale locale = 1;
     string text = 2;
}

message SemanticsLocale {
	string language = 1;
    string region = 2;
}

message ReferenceDescription {
	string sourceId = 1;
	QualifiedName sourceBrowseName = 2;
	string referenceId = 3;
	QualifiedName referenceBrowseName = 4;
	string targetId = 5;
	QualifiedName targetBrowseName = 6;
	bool isHierarchical = 7;
}

message NamespacesMap {
	map<string, NsIndexPresence> namespacesMap = 1;
}

message ModifiedNode {
	IdAndBrowsename idAndBrowsename = 1;
	ModifiedAttributes modifiedAttribute = 2;
}

message ModifiedNodes {
	repeated ModifiedNode modifiedNodes = 1;
}

message ModifiedAttributes {
	repeated ModifiedAttribute modifiedAttrs = 1;
}

message ModifiedValues {
	repeated ModifiedValue modifiedVals = 1;
}

message ReferenceDescriptions {
	repeated ReferenceDescription referenceDescrs = 1;
}

message SemTypeMembers {
	repeated SemTypeMember members = 1;
}

message SemTypeMember {
	int64 parentIndex = 1;
	bool isRoot = 2;
	string id = 3;
	SemProperties properties = 4;
}

message SemProperties {
	SemPropertyLocalizedText displyNameProp = 1;
	SemPropertyQualifiedName qualifiedNameProp = 2;
	SemPropertyLocalizedText descriptionProp = 3;
}

message SemPropertyQualifiedName {
	int32 id = 1;
	QualifiedName browsename = 2;
	bool isReadOnly = 3;
}

message SemPropertyLocalizedText {
	int32 id = 1;
	LocalizedText value = 2;
	bool isReadOnly = 3;
}



message ModifiedNameses {
	map<string, ModifiedNamespace> modNamespaces = 1;
}

message ModifiedNameseValues {
	map<string, ModifiedValues> modNamespacesValues = 1;
}

message NamespaceCompareResult {
	oneof result {
		NamespacesMap namespaces = 1;
		ModifiedNodes modifiedNodes  = 2;
		ReferenceDescriptions newReferences = 3;
		ReferenceDescriptions deletedReferences = 4;
		ModifiedNameses newNamespaces = 5;
		ModifiedNameses deletedNamespaces = 6;
		ModifiedNameseValues modifiedNamespaces = 7;
		SemTypeMembers newNodes = 8;
		SemTypeMembers deletedNodes = 9;
		bool hasDifferences = 10;
		bool success = 11;
		string error = 12;
		string errorDetails = 13;
	}
}

message NamespaceBackupSetsResult {
	repeated NamespaceBackupSet backupsets = 1;
}

message ConfigurationBackupSetsResult {
	repeated ConfigurationBackupSet backupsets = 1;
}

message NamespaceBackupSet {
	string id = 1;
	string name = 2;
	int64 timestamp = 3;
}

message ConfigurationBackupSet {
	string name = 1;
	int64 timestamp = 2;
}

message CompareVariableMappingsResult {
	oneof result {
		DiffTextModel old = 1;
		DiffTextModel new = 2;
		bool hasDifferences = 3;
		bool success = 10;
		string error = 11;
	}
}

message DiffTextModel {
	repeated DiffTextPiece lines = 1;
	bool hasDifferences = 2;
}

message DiffTextPiece {
	ChangeTextType type = 1;
	int32 position = 2;
	string text = 3;
	repeated DiffTextPiece subPieces = 4;
}

enum ChangeTextType {
	unchanged = 0;
	deleted = 1;
	inserted = 2;
	imaginary = 3;
	modified = 4;
}